#!/usr/bin/env ruby

require 'hashie'
require 'json'
require 'rtorrent_xmlrpc'
require 'thor'

class RTorrent_XMLRPC < Thor

  def initialize(*args)
    super
    # Read in config file
    config_file = nil
    %W[rtorrent_xmlrpc.conf #{Dir.home}/.config/rtorrent_xmlrpc.conf #{Dir.home}/.rtorrent_xmlrpc.conf /etc/rtorrent_xmlrpc.conf].each do |f|
      if File.exists?(f)
        config_file = f
        break
      end
    end
    raise 'No config file found.' if config_file.nil?
    config = Hashie::Mash.load(config_file)
    # Connect to xmlrpc service
    @xmlrpc = RTorrent::XMLRPC.new_from_hash(config.to_h)
  end

  desc "print", "Print the torrent information"
  option :complete, aliases: '-c', type: :boolean
  option :files, aliases: '-f', type: :boolean
  option :incomplete, aliases: '-i', type: :boolean
  option :json, aliases: '-j', type: :boolean
  option :label, aliases: '-l', type: :string
  def print
    torrents = @xmlrpc.torrents
    torrents = torrents.complete if options[:complete]
    torrents = torrents.incomplete if options[:incomplete]
    torrents = torrents.with_label options[:label] if options[:label]
    if options[:json]
      puts torrents.to_json
    else
      torrents.each { |hash, torrent| torrent.pp(options[:files]) }
    end
  end

  desc "start HASH", "Start torrent with HASH"
  def start(hash)
    @xmlrpc.start hash
  end

  desc "stop HASH", "Stop torrent with HASH"
  def stop(hash)
    @xmlrpc.stop hash
  end

  desc "pause HASH", "Pause torrent with HASH"
  def pause(hash)
    @xmlrpc.pause hash
  end

  desc "label HASH LABEL", "Label the torrent identified by HASH with LABEL"
  def label(hash, label)
    @xmlrpc.set_labels(hash, label)
  end

end

RTorrent_XMLRPC.start(ARGV)
