#!/usr/bin/env ruby

require 'hashie'
require 'json'
require 'rtorrent_xmlrpc'
require 'thor'

class RTorrent_XMLRPC < Thor

  class_option '--json', type: :boolean

  def initialize(*args)
    super
    # Read in config file
    config_file = nil
    %W[rtorrent_xmlrpc.conf #{Dir.home}/.config/rtorrent_xmlrpc.conf #{Dir.home}/.rtorrent_xmlrpc.conf /etc/rtorrent_xmlrpc.conf].each do |f|
      if File.exists?(f)
        config_file = f
        break
      end
    end
    raise 'No config file found.' if config_file.nil?
    config = Hashie::Mash.load(config_file)
    # Connect to xmlrpc service
    @xmlrpc = RTorrent::XMLRPC.new_from_hash(config.to_h)
    @xmlrpc.connect
    @xmlrpc.fetch_torrents
  end

  no_tasks do
    def print(torrents)
      if options[:json]
        puts torrents.to_json
      else
        torrents.each { |torrent| torrent.pp }
      end
    end
  end

  desc "list", "Pretty print all the torrents on the server."
  def list
    self.print @xmlrpc.torrents
  end

  desc "start HASH", "Start torrent with HASH"
  def start(hash)
    @xmlrpc.start hash
  end

  desc "stop HASH", "Stop torrent with HASH"
  def stop(hash)
    @xmlrpc.stop hash
  end

  desc "pause HASH", "Pause torrent with HASH"
  def pause(hash)
    @xmlrpc.pause hash
  end

  desc "complete", "Print all torrents that are complete."
  def complete
    self.print @xmlrpc.completed
  end

  desc "incomplete", "Print all incomplete torrents."
  def incomplete
    self.print @xmlrpc.incomplete
  end

  desc "labeled LABEL", "Print all torrents with label"
  def labeled(label)
    self.print @xmlrpc.with_label label
  end

  desc "files HASH", "Print the torrent information with files."
  def files(hash)
    # TODO:
  end
end

RTorrent_XMLRPC.start(ARGV)
